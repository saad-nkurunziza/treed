generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  username      String?    @unique
  email         String     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  bio           String?    @db.Text
  treeds        Treed[]
  likes         Like[]
  comments      Comment[]
  activities    Activity[]
  createdAt     DateTime   @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Treed {
  id         String     @id @default(cuid())
  content    String
  user       User?      @relation(fields: [userId], references: [email])
  userId     String?
  likes      Like[]
  createdAt  DateTime   @default(now())
  modifiedAt DateTime   @updatedAt
  comments   Comment[]
  activities Activity[]
}

model Like {
  treed     Treed    @relation(fields: [treedId], references: [id])
  treedId   String
  user      User     @relation(fields: [userId], references: [email])
  userId    String
  createdAt DateTime @default(now())

  @@id([treedId, userId])
  @@unique([treedId, userId])
}

model Comment {
  id        String   @id @default(cuid())
  comment   String   @db.Text
  treed     Treed    @relation(fields: [treedId], references: [id])
  treedId   String
  user      User     @relation(fields: [userId], references: [email])
  userId    String
  createdAt DateTime @default(now())

  @@index([treedId, userId])
}

model Activity {
  id        String   @id @default(cuid())
  details   String
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [email])
  userId    String?
  treed     Treed?   @relation(fields: [treedId], references: [id])
  treedId   String?
}
